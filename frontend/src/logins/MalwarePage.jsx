import React, { useState } from 'react';
import { Bug, Upload, FileSearch, Shield, Activity, AlertTriangle, CheckCircle, TrendingUp, Users, Database } from 'lucide-react';

const MalwarePage = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    setSelectedFile(file);
    setScanResult(null);
  };

  const handleFileScan = async () => {
    if (!selectedFile) return;
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scanning progress
    const progressInterval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          return 100;
        }
        return prev + Math.random() * 20;
      });
    }, 200);

    setTimeout(() => {
      clearInterval(progressInterval);
      setScanProgress(100);
      
      setTimeout(() => {
        setScanResult({
          fileName: selectedFile.name,
          fileSize: (selectedFile.size / 1024).toFixed(2) + ' KB',
          threat: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'safe',
          details: {
            signatures: Math.floor(Math.random() * 5),
            behaviors: Math.floor(Math.random() * 3),
            reputation: Math.floor(Math.random() * 100),
            scanTime: (Math.random() * 5 + 1).toFixed(2) + 's',
            lastUpdated: new Date().toLocaleString()
          }
        });
        setIsScanning(false);
        setScanProgress(0);
      }, 1000);
    }, 3000);
  };

  const stats = [
    { icon: Shield, label: 'Files Scanned', value: '12.5M+', color: 'text-blue-400' },
    { icon: Bug, label: 'Malware Detected', value: '523K', color: 'text-red-400' },
    { icon: Database, label: 'Signature Database', value: '450M+', color: 'text-green-400' },
    { icon: TrendingUp, label: 'Detection Rate', value: '99.8%', color: 'text-purple-400' }
  ];

  const recentDetections = [
    { file: 'suspicious.exe', type: 'Trojan.Win32.Agent', severity: 'high', time: '1 minute ago' },
    { file: 'malware.pdf', type: 'PDF.Exploit.CVE', severity: 'high', time: '3 minutes ago' },
    { file: 'adware.dll', type: 'Adware.Generic', severity: 'medium', time: '8 minutes ago' },
    { file: 'rootkit.sys', type: 'Rootkit.Win32.ZeroAccess', severity: 'high', time: '15 minutes ago' }
  ];

  return (
    <div className="malware-page">
      <div className="page-header animate-fade-in">
        <div className="header-content">
          <div className="header-icon">
            <Bug size={48} className="animate-bounce" />
          </div>
          <div className="header-text">
            <h1>Malware Detection</h1>
            <p>Advanced malware scanning and behavioral analysis</p>
          </div>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="stats-grid animate-fade-in-up">
        {stats.map((stat, index) => (
          <div key={index} className="stat-card" style={{ animationDelay: `${index * 0.1}s` }}>
            <stat.icon className={`stat-icon ${stat.color}`} />
            <div className="stat-value">{stat.value}</div>
            <div className="stat-label">{stat.label}</div>
          </div>
        ))}
      </div>

      {/* File Scanner */}
      <div className="scanning-section">
        <div className="scan-card large-card animate-slide-up" style={{ animationDelay: '0.2s' }}>
          <div className="scan-header">
            <FileSearch className="scan-icon" />
            <h3>File Scanner</h3>
          </div>
          <div className="scan-content">
            <div className="file-upload-area">
              <input
                type="file"
                id="file-input"
                onChange={handleFileSelect}
                className="file-input"
                accept=".exe,.dll,.bat,.cmd,.scr,.com,.pif,.jar,.zip,.rar,.pdf,.doc,.docx"
              />
              <label htmlFor="file-input" className="file-upload-label">
                <Upload size={48} />
                <span>Click to select file or drag and drop</span>
                <small>Supported: EXE, DLL, PDF, DOC, ZIP and more</small>
              </label>
            </div>
            
            {selectedFile && (
              <div className="selected-file">
                <div className="file-info">
                  <span className="file-name">{selectedFile.name}</span>
                  <span className="file-size">{(selectedFile.size / 1024).toFixed(2)} KB</span>
                </div>
                <button 
                  onClick={handleFileScan}
                  disabled={isScanning}
                  className="scan-button"
                >
                  {isScanning ? (
                    <Activity className="animate-spin" />
                  ) : (
                    <Bug />
                  )}
                  {isScanning ? 'Scanning...' : 'Scan File'}
                </button>
              </div>
            )}

            {isScanning && (
              <div className="scan-progress">
                <div className="progress-bar">
                  <div 
                    className="progress-fill" 
                    style={{ width: `${scanProgress}%` }}
                  ></div>
                </div>
                <span className="progress-text">{scanProgress.toFixed(0)}% Complete</span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Scan Results */}
      {scanResult && (
        <div className="results-section animate-fade-in">
          <div className="results-card">
            <div className="results-header">
              <h3>Scan Results</h3>
              <div className={`threat-badge threat-${scanResult.threat}`}>
                {scanResult.threat === 'safe' && <CheckCircle size={16} />}
                {scanResult.threat !== 'safe' && <AlertTriangle size={16} />}
                {scanResult.threat.toUpperCase()}
              </div>
            </div>
            <div className="results-content">
              <div className="result-details">
                <div className="detail-item">
                  <span className="detail-label">File Name:</span>
                  <span className="detail-value">{scanResult.fileName}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">File Size:</span>
                  <span className="detail-value">{scanResult.fileSize}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">Malware Signatures:</span>
                  <span className="detail-value">{scanResult.details.signatures} detected</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">Suspicious Behaviors:</span>
                  <span className="detail-value">{scanResult.details.behaviors} identified</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">Reputation Score:</span>
                  <span className="detail-value">{scanResult.details.reputation}/100</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">Scan Time:</span>
                  <span className="detail-value">{scanResult.details.scanTime}</span>
                </div>
              </div>
              <div className="scan-timestamp">
                Last updated: {scanResult.details.lastUpdated}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recent Detections */}
      <div className="threats-section animate-fade-in-up">
        <h3>Recent Malware Detections</h3>
        <div className="threats-list">
          {recentDetections.map((detection, index) => (
            <div key={index} className="threat-item" style={{ animationDelay: `${index * 0.1}s` }}>
              <div className="threat-info">
                <span className="threat-domain">{detection.file}</span>
                <span className="threat-type">{detection.type}</span>
                <span className="threat-time">{detection.time}</span>
              </div>
              <div className={`threat-level threat-${detection.severity}`}>
                <Bug size={16} />
                {detection.severity.toUpperCase()}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default MalwarePage;
