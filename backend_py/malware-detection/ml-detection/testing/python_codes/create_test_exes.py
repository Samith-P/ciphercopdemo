#!/usr/bin/env python3
"""
Simple EXE Creator for ML Testing
Creates .exe files from Python malware samples for testing
"""

import os
import subprocess
import sys

def create_exe_with_auto_py_to_exe():
    """Create .exe files using auto-py-to-exe (GUI) or pyinstaller directly"""
    
    python_files = [
        "keylogger_malware.py",
        "ransomware_malware.py", 
        "backdoor_malware.py",
        "safe_calculator.py"
    ]
    
    output_dir = "test_executables"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    print("=== Creating EXE Files for ML Testing ===\n")
    
    # Check if PyInstaller is available
    try:
        result = subprocess.run(["pyinstaller", "--version"], capture_output=True, text=True)
        print(f"PyInstaller version: {result.stdout.strip()}")
    except FileNotFoundError:
        print("Installing PyInstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
    
    successful = 0
    failed = 0
    
    for py_file in python_files:
        if not os.path.exists(py_file):
            print(f"‚ùå File not found: {py_file}")
            failed += 1
            continue
            
        print(f"Creating .exe for {py_file}...")
        
        try:
            cmd = [
                "pyinstaller",
                "--onefile",
                "--clean", 
                "--noconfirm",
                "--distpath", output_dir,
                "--workpath", "temp_build",
                "--specpath", "temp_spec",
                py_file
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                exe_name = py_file.replace('.py', '.exe')
                print(f"‚úÖ Successfully created {exe_name}")
                successful += 1
            else:
                print(f"‚ùå Failed to create .exe for {py_file}")
                print(f"Error: {result.stderr[:200]}...")
                failed += 1
                
        except subprocess.TimeoutExpired:
            print(f"‚ùå Timeout creating .exe for {py_file}")
            failed += 1
        except Exception as e:
            print(f"‚ùå Error creating .exe for {py_file}: {e}")
            failed += 1
    
    # Clean up temporary directories
    import shutil
    for temp_dir in ["temp_build", "temp_spec"]:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
    
    print(f"\n" + "="*50)
    print(f"Conversion Summary:")
    print(f"‚úÖ Successful: {successful}")
    print(f"‚ùå Failed: {failed}")
    print(f"üìÅ Output directory: {output_dir}/")
    
    if successful > 0:
        print(f"\nüéØ Test .exe files ready for ML detection:")
        if os.path.exists(output_dir):
            for file in os.listdir(output_dir):
                if file.endswith('.exe'):
                    file_size = os.path.getsize(os.path.join(output_dir, file))
                    print(f"   - {file} ({file_size:,} bytes)")
    
    return successful > 0

def create_batch_alternatives():
    """Alternative: Create .bat files that can also be tested"""
    
    python_files = [
        "keylogger_malware.py",
        "ransomware_malware.py", 
        "backdoor_malware.py",
        "safe_calculator.py"
    ]
    
    output_dir = "test_batch_files"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    print("\n=== Creating Batch File Alternatives ===")
    
    for py_file in python_files:
        if os.path.exists(py_file):
            bat_name = py_file.replace('.py', '.bat')
            bat_path = os.path.join(output_dir, bat_name)
            
            bat_content = f"""@echo off
title {py_file.replace('.py', '').replace('_', ' ').title()}
echo Starting {py_file}...
python "{os.path.abspath(py_file)}"
pause
"""
            
            with open(bat_path, 'w') as f:
                f.write(bat_content)
            
            print(f"‚úÖ Created {bat_name}")
    
    print(f"üìÅ Batch files created in: {output_dir}/")

if __name__ == "__main__":
    print("Choose conversion method:")
    print("1. Create .exe files with PyInstaller (recommended)")
    print("2. Create .bat alternatives (if PyInstaller fails)")
    print("3. Both")
    
    choice = input("\nEnter choice (1-3): ").strip()
    
    if choice in ['1', '3']:
        success = create_exe_with_auto_py_to_exe()
        if not success and choice == '1':
            print("\nPyInstaller failed. Creating batch alternatives...")
            create_batch_alternatives()
    
    if choice in ['2', '3']:
        create_batch_alternatives()
    
    print("\nüéØ Files ready for ML malware detection testing!")
