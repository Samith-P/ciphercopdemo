from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import time

app = Flask(__name__)
CORS(app, 
     supports_credentials=True,
     origins=["http://localhost:5173", "http://localhost:5174"],
     allow_headers=["Content-Type", "Authorization", "Cookie"],
     methods=["GET", "POST", "OPTIONS"])  # Allow credentials for authentication

# Replace this with your actual API key
HYBRID_ANALYSIS_API_KEY = '4xxvhg5e95017a3ck4317xzha4b0fc19sbfrbse01e3d46fe3lf782j9db45e947'
HYBRID_ANALYSIS_URL = 'https://hybrid-analysis.com/api/v2/submit/file'

# Node.js backend endpoint for storing results
NODEJS_BACKEND_URL = 'http://localhost:5001'

@app.route('/submit', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['file']
    auth_cookie = request.headers.get('Cookie', '')  # Get auth cookie from request

    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    # Read the file content into memory to avoid stream issues
    file_content = file.read()
    file.seek(0)  # Reset file pointer
    
    files = {
        'file': (file.filename, file_content, file.content_type or 'application/octet-stream')
    }

    data = {
        'environment_id': '160'  # Windows 7 64 bit to match your working example
    }

    headers = {
        'api-key': HYBRID_ANALYSIS_API_KEY,
        'user-agent': 'Falcon Sandbox'
    }

    # Send request to Hybrid Analysis
    response = requests.post(HYBRID_ANALYSIS_URL, headers=headers, files=files, data=data)

    print(f"Response status: {response.status_code}")
    print(f"Response headers: {response.headers}")
    print(f"Response text: {response.text}")

    # Accept both 200 (OK) and 201 (Created) as success status codes
    if response.status_code not in [200, 201]:
        return jsonify({
            'error': f'API request failed with status {response.status_code}',
            'response': response.text
        }), response.status_code

    try:
        response_data = response.json()
        print(f"Response JSON: {response_data}")
        
        # Wait 60 seconds before fetching the report
        print("Waiting 60 seconds for analysis to complete...")
        time.sleep(60)
        
        # Get the SHA256 hash from the submission response
        sha256 = response_data.get('sha256')
        report_data = None
        
        if sha256:
            # Fetch the report after waiting
            report_data = get_report_data(sha256)
            if report_data:
                # Combine submission and report data
                response_data['report'] = report_data

        # Prepare data for Node.js backend storage
        verdict = 'unknown'
        threat_score = 0
        is_malware = False
        
        if report_data:
            verdict = report_data.get('verdict', 'unknown').lower()
            # Use multiscan_result as threat score if threat_score is null
            threat_score = report_data.get('threat_score') or report_data.get('multiscan_result', 0)
            is_malware = verdict == 'malicious'

        # Store result via Node.js backend
        storage_data = {
            'fileName': file.filename,
            'testType': 'sandbox',
            'result': {
                'positives': 1 if is_malware else 0,
                'total': 1,
                'verdict': verdict,
                'threatScore': threat_score,
                'sandboxData': response_data
            }
        }
        
        # Send to Node.js backend for MongoDB storage
        try:
            storage_headers = {
                'Content-Type': 'application/json'
            }
            if auth_cookie:
                storage_headers['Cookie'] = auth_cookie
                
            print(f"Sending storage data to Node.js backend:")
            print(f"URL: {NODEJS_BACKEND_URL}/api/malware/store")
            print(f"Headers: {storage_headers}")
            print(f"Data: {storage_data}")
                
            storage_response = requests.post(
                f'{NODEJS_BACKEND_URL}/api/malware/store',
                json=storage_data,
                headers=storage_headers
            )
            
            print(f"Storage response status: {storage_response.status_code}")
            print(f"Storage response text: {storage_response.text}")
            
            if storage_response.status_code == 200:
                print("✅ Successfully stored sandbox result in MongoDB")
            else:
                print(f"⚠️ Failed to store result: {storage_response.status_code}")
                print(f"Response: {storage_response.text}")
                
        except Exception as storage_error:
            print(f"⚠️ Storage error: {storage_error}")
            import traceback
            traceback.print_exc()
                
        return jsonify({
            'success': True,
            'data': {
                **response_data,
                'verdict': verdict,
                'threatScore': threat_score,
                'isMalware': is_malware
            },
            'message': 'File submitted and analyzed successfully'
        })
            
    except ValueError as e:
        print(f"JSON decode error: {e}")
        return jsonify({'error': 'Invalid JSON response', 'text': response.text}), 500

def get_report_data(sha256):
    headers = {
        'api-key': HYBRID_ANALYSIS_API_KEY,
        'user-agent': 'Falcon Sandbox'
    }
    
    # Get report from Hybrid Analysis - corrected URL
    report_url = f'https://hybrid-analysis.com/api/v2/overview/{sha256}/summary'
    response = requests.get(report_url, headers=headers)
    
    print(f"Report response status: {response.status_code}")
    print(f"Report response text: {response.text}")
    
    try:
        report_data = response.json()
        print(f"Report JSON: {report_data}")
        return report_data
    except ValueError:
        print(f"Failed to get report for SHA256: {sha256}")
        return None

@app.route('/report/<sha256>', methods=['GET'])
def get_report(sha256):
    report_data = get_report_data(sha256)
    if report_data:
        return jsonify({
            'success': True,
            'data': report_data
        })
    else:
        return jsonify({'error': 'Failed to get report', 'success': False}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5005)  # Running on port 5005 to avoid conflicts
